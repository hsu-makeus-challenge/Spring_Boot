plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.22.0'
}

group = 'umc'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// queryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	compileOnly 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.9'

	//validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
}


tasks.named('compileJava') {
	dependsOn 'spotlessApply'
	dependsOn 'compileQuerydsl'
}
tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	java {
		googleJavaFormat()
		importOrder('java', 'javax', 'jakarta', 'org', 'com')
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

def generated = "src/main/generated"

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java", generated]
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

tasks.register("compileQuerydsl", JavaCompile) {
	group = "build"
	description = "Generate QueryDSL Q-classes"
	source = sourceSets.main.java
	classpath = sourceSets.main.compileClasspath
	destinationDirectory.set(file(generated))
	options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.named('spotlessJava') {
	dependsOn 'compileQuerydsl'
}

tasks.named('test') {
	useJUnitPlatform()
}